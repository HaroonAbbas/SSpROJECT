/*
Deployment script for SSDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SSDB"
:setvar DefaultFilePrefix "SSDB"
:setvar DefaultDataPath "C:\Users\DELL\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\DELL\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Arabic_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[SS_Sides]...';


GO
CREATE TABLE [dbo].[SS_Sides] (
    [SIDE_NO]     INT            NOT NULL,
    [SIDE_TYPE]   INT            NOT NULL,
    [SIDE_A_NAME] NVARCHAR (MAX) NULL,
    [SIDE_E_NAME] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_SS_Sides] PRIMARY KEY CLUSTERED ([SIDE_NO] ASC, [SIDE_TYPE] ASC)
);


GO
PRINT N'Creating Table [dbo].[SS_SpareParts]...';


GO
CREATE TABLE [dbo].[SS_SpareParts] (
    [StorageNumber] NVARCHAR (50) NOT NULL,
    [PieceName]     NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([StorageNumber] ASC)
);


GO
PRINT N'Creating Table [dbo].[SS_SupplyBonds]...';


GO
CREATE TABLE [dbo].[SS_SupplyBonds] (
    [OP_ID]             INT           NOT NULL,
    [OP_DATE]           DATETIME      NULL,
    [JULIAN_DATE]       NVARCHAR (10) NULL,
    [SERIAL_NO]         NVARCHAR (10) NULL,
    [SEND_TO_SIDE_NO]   INT           NULL,
    [StorageNumber]     NVARCHAR (50) NULL,
    [REQUEST_FOR]       NVARCHAR (50) NULL,
    [FIELD_PRIORITY]    NVARCHAR (50) NULL,
    [INITIAL_SIGNATURE] NVARCHAR (50) NULL,
    [REQUIRED_QTY]      INT           NULL,
    [RECEIVED_QTY]      INT           NULL,
    [WAITING_ENTRY_QTY] INT           NULL,
    [FOLLOW_UP_DATE]    NVARCHAR (10) NULL,
    [COMPLETION_DATE]   NVARCHAR (10) NULL,
    [NOTES_SIDE_NO]     INT           NULL,
    PRIMARY KEY CLUSTERED ([OP_ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Units]...';


GO
CREATE TABLE [dbo].[Units] (
    [Id]         INT            NOT NULL,
    [UnitName]   NVARCHAR (800) NOT NULL,
    [UnitIdName] NVARCHAR (800) NOT NULL,
    [BackUpPath] NVARCHAR (800) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Procedure [dbo].[Sp_Insert_SupplyBonds]...';


GO
CREATE PROCEDURE [dbo].[Sp_Insert_SupplyBonds]
	@OP_ID int,
	@OP_DATE  datetime              ,
	@JULIAN_DATE nvarchar(10)       ,
	@SERIAL_NO nvarchar(10)         ,
	@SEND_TO_SIDE_NO int            ,
	@StorageNumber nvarchar(50)     ,
	@REQUEST_FOR nvarchar(50)       ,
	@FIELD_PRIORITY nvarchar(50)    ,
	@INITIAL_SIGNATURE nvarchar(50) ,
	@REQUIRED_QTY int               ,
	@RECEIVED_QTY int               ,
	@WAITING_ENTRY_QTY int          ,
	@FOLLOW_UP_DATE nvarchar(10)    ,
	@COMPLETION_DATE nvarchar(10)   ,
	@NOTES_SIDE_NO int              
AS
	
INSERT INTO [dbo].[SS_SupplyBonds]
           ([OP_ID]
           ,[OP_DATE]
           ,[JULIAN_DATE]
           ,[SERIAL_NO]
           ,[SEND_TO_SIDE_NO]
           ,[StorageNumber]
           ,[REQUEST_FOR]
           ,[FIELD_PRIORITY]
           ,[INITIAL_SIGNATURE]
           ,[REQUIRED_QTY]
           ,[RECEIVED_QTY]
           ,[WAITING_ENTRY_QTY]
           ,[FOLLOW_UP_DATE]
           ,[COMPLETION_DATE]
           ,[NOTES_SIDE_NO])
     VALUES
           (@OP_ID                           
           ,@OP_DATE                         
           ,@JULIAN_DATE                     
           ,@SERIAL_NO                       
           ,@SEND_TO_SIDE_NO                 
           ,@StorageNumber                   
           ,@REQUEST_FOR                     
           ,@FIELD_PRIORITY                  
           ,@INITIAL_SIGNATURE               
           ,@REQUIRED_QTY                    
           ,@RECEIVED_QTY                    
           ,@WAITING_ENTRY_QTY               
           ,@FOLLOW_UP_DATE                  
           ,@COMPLETION_DATE                 
           ,@NOTES_SIDE_NO)

RETURN
GO
PRINT N'Creating Procedure [dbo].[Sp_Update_SupplyBonds]...';


GO
CREATE PROCEDURE [dbo].[Sp_Update_SupplyBonds]
	@OP_ID int,
	@OP_DATE  datetime              ,
	@JULIAN_DATE nvarchar(10)       ,
	@SERIAL_NO nvarchar(10)         ,
	@SEND_TO_SIDE_NO int            ,
	@StorageNumber nvarchar(50)     ,
	@REQUEST_FOR nvarchar(50)       ,
	@FIELD_PRIORITY nvarchar(50)    ,
	@INITIAL_SIGNATURE nvarchar(50) ,
	@REQUIRED_QTY int               ,
	@RECEIVED_QTY int               ,
	@WAITING_ENTRY_QTY int          ,
	@FOLLOW_UP_DATE nvarchar(10)    ,
	@COMPLETION_DATE nvarchar(10)   ,
	@NOTES_SIDE_NO int              
AS
	UPDATE SS_SupplyBonds
	   SET OP_ID = @OP_ID,                            
	      OP_DATE = @OP_DATE,                         
	      JULIAN_DATE = @JULIAN_DATE,                 
	      SERIAL_NO = @SERIAL_NO,                     
	      SEND_TO_SIDE_NO = @SEND_TO_SIDE_NO,         
	      StorageNumber = @StorageNumber,             
	      REQUEST_FOR = @REQUEST_FOR,                 
	      FIELD_PRIORITY = @FIELD_PRIORITY,           
	      INITIAL_SIGNATURE = @INITIAL_SIGNATURE,     
	      REQUIRED_QTY = @REQUIRED_QTY,               
	      RECEIVED_QTY = @RECEIVED_QTY,               
	      WAITING_ENTRY_QTY = @WAITING_ENTRY_QTY,     
	      FOLLOW_UP_DATE = @FOLLOW_UP_DATE,           
	      COMPLETION_DATE = @COMPLETION_DATE,         
	      NOTES_SIDE_NO = @NOTES_SIDE_NO           
	 WHERE OP_ID = @OP_ID
RETURN
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
